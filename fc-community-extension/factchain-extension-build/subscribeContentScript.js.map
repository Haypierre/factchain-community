{"version":3,"file":"subscribeContentScript.js","mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8C","sources":["webpack://fc-community-extension/./src/subscribeContentScript.js"],"sourcesContent":["/// For now we deactivate notifications and the subscribeContentScript\n/// It is not super useful for users, and it forces the user to\n/// link their web3 provider when the page opens, which is not a\n/// great UX.\n\n// import { logger } from \"./utils/logging\";\n// import { createFactCheckProvider } from \"./web3\";\n\n// const provider = createFactCheckProvider();\n// const contract = await provider.getFCContract();\n\n\n// const notify = (title, content, postUrl) => {\n//   logger.log(\"Requestion notification\");\n//   chrome.runtime.sendMessage({\n//     type: 'fc-notify',\n//     postUrl,\n//     title,\n//     content,\n//   });\n// };\n\n// contract.on(\"NoteCreated\", async (postUrl, creator, stake, event) => {\n//   logger.log(\"New note created\", event);\n//   const address = await provider.getAddress();\n//   if (address.toLowerCase() === creator.toLowerCase()) {\n//     notify(\"New note\", `ðŸš€ Your note was successfuly created!`, postUrl);\n//   } else {\n//     logger.log(`Not a notification for address ${address}`);\n//   }\n// });\n\n// contract.on(\"NoteRated\", async (postUrl, creator, rater, rating, stake, event) => {\n//   logger.log(\"New note rated\", event);\n//   const address = (await provider.getAddress()).toLowerCase();\n//   if (address === rater.toLowerCase()) {\n//     notify(\"New rating\", `ðŸš€ Your rating was sucessfuly registered!`, postUrl);\n//   } else {\n//     logger.log(`Not a notification for address ${address}`);\n//   }\n// });\n\n// contract.on(\"RaterRewarded\", async (postUrl, creator, rater, reward, stake, event) => {\n//   logger.log(\"New rating reward\", event);\n//   const address = (await provider.getAddress()).toLowerCase();\n//   if (address === rater.toLowerCase()) {\n//     notify(\"Rating reward\", `ðŸ¤‘ Rewarded ${reward} wei for your rating!`, postUrl);\n//   } else {\n//     logger.log(`Not a notification for address ${address}`);\n//   }\n// });\n\n// contract.on(\"RaterSlashed\", async (postUrl, creator, rater, slash, stake, event) => {\n//   logger.log(\"New rating slash\", event);\n//   const address = (await provider.getAddress()).toLowerCase();\n//   if (address === rater.toLowerCase()) {\n//     notify(\"Rating slash\", `ðŸ˜” Slashed ${slash} wei for your rating...`, postUrl);\n//   } else {\n//     logger.log(`Not a notification for address ${address}`);\n//   }\n// });\n\n// contract.on(\"CreatorRewarded\", async (postUrl, creator, reward, stake, event) => {\n//   logger.log(\"New note reward\", event);\n//   const address = (await provider.getAddress()).toLowerCase();\n//   if (address === creator.toLowerCase()) {\n//     notify(\"Note reward\", `ðŸ¤‘ Rewarded ${reward} wei for your note!`, postUrl);\n//   } else {\n//     logger.log(`Not a notification for address ${address}`);\n//   }\n// });\n\n// contract.on(\"CreatorSlashed\", async (postUrl, creator, slash, stake, event) => {\n//   logger.log(\"New note slash\", event);\n//   const address = (await provider.getAddress()).toLowerCase();\n//   if (address === creator.toLowerCase()) {\n//     notify(\"Note slash\", `ðŸ˜” Slashed ${slash} wei for your note...`, postUrl);\n//   } else {\n//     logger.log(`Not a notification for address ${address}`);\n//   }\n// });\n\n// logger.log(\"Listening to contract events\");"],"names":[],"sourceRoot":""}